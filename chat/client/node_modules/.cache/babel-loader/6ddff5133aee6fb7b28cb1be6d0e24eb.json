{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _EventSpy = _interopRequireDefault(require(\"../EventSpy\"));\n\nvar _FunctionContext = _interopRequireDefault(require(\"./FunctionContext\"));\n\nvar _InternalContext = _interopRequireDefault(require(\"./InternalContext\"));\n\nvar _SpineTo = _interopRequireDefault(require(\"../SpineTo\"));\n\nvar _StateContext = _interopRequireDefault(require(\"./StateContext\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar MIN_CHECK_INTERVAL = 17; // 1 frame\n\nvar MODE_BOTTOM = 'bottom';\nvar MODE_TOP = 'top';\nvar NEAR_END_THRESHOLD = 1;\nvar SCROLL_DECISION_DURATION = 34; // 2 frames\n\nfunction setImmediateInterval(fn, ms) {\n  fn();\n  return setInterval(fn, ms);\n}\n\nfunction computeViewState(_ref) {\n  var mode = _ref.mode,\n      _ref$target = _ref.target,\n      offsetHeight = _ref$target.offsetHeight,\n      scrollHeight = _ref$target.scrollHeight,\n      scrollTop = _ref$target.scrollTop;\n  var atBottom = scrollHeight - scrollTop - offsetHeight < NEAR_END_THRESHOLD;\n  var atTop = scrollTop < NEAR_END_THRESHOLD;\n  var atEnd = mode === MODE_TOP ? atTop : atBottom;\n  var atStart = mode !== MODE_TOP ? atTop : atBottom;\n  return {\n    atBottom: atBottom,\n    atEnd: atEnd,\n    atStart: atStart,\n    atTop: atTop\n  };\n}\n\nvar Composer = function Composer(_ref2) {\n  var checkInterval = _ref2.checkInterval,\n      children = _ref2.children,\n      debounce = _ref2.debounce,\n      mode = _ref2.mode;\n  mode = mode === MODE_TOP ? MODE_TOP : MODE_BOTTOM;\n  var ignoreScrollEventBeforeRef = (0, _react.useRef)(0);\n\n  var _useState = (0, _react.useState)(mode === MODE_TOP ? 0 : '100%'),\n      _useState2 = _slicedToArray(_useState, 2),\n      scrollTop = _useState2[0],\n      setScrollTop = _useState2[1]; // Internal context\n\n\n  var _useState3 = (0, _react.useState)(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      offsetHeight = _useState4[0],\n      setOffsetHeight = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      scrollHeight = _useState6[0],\n      setScrollHeight = _useState6[1]; // State context\n\n\n  var _useState7 = (0, _react.useState)(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      animating = _useState8[0],\n      setAnimating = _useState8[1];\n\n  var _useState9 = (0, _react.useState)(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      atBottom = _useState10[0],\n      setAtBottom = _useState10[1];\n\n  var _useState11 = (0, _react.useState)(true),\n      _useState12 = _slicedToArray(_useState11, 2),\n      atEnd = _useState12[0],\n      setAtEnd = _useState12[1];\n\n  var _useState13 = (0, _react.useState)(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      atTop = _useState14[0],\n      setAtTop = _useState14[1];\n\n  var _useState15 = (0, _react.useState)(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      atStart = _useState16[0],\n      setAtStart = _useState16[1];\n\n  var _useState17 = (0, _react.useState)(true),\n      _useState18 = _slicedToArray(_useState17, 2),\n      sticky = _useState18[0],\n      setSticky = _useState18[1]; // Function context\n\n\n  var scrollTo = (0, _react.useCallback)(function (scrollTop) {\n    setAnimating(true);\n    setScrollTop(scrollTop);\n  }, [setAnimating, setScrollTop]);\n  var scrollToBottom = (0, _react.useCallback)(function () {\n    return scrollTo('100%');\n  }, [scrollTo]);\n  var scrollToTop = (0, _react.useCallback)(function () {\n    return scrollTo(0);\n  }, [scrollTo]);\n  var scrollToEnd = (0, _react.useCallback)(function () {\n    return mode === MODE_TOP ? scrollToTop() : scrollToBottom();\n  }, [mode, scrollToBottom, scrollToTop]);\n  var scrollToStart = (0, _react.useCallback)(function () {\n    return mode === MODE_TOP ? scrollToBottom() : scrollToTop();\n  }, [mode, scrollToBottom, scrollToTop]);\n\n  var _useState19 = (0, _react.useState)(null),\n      _useState20 = _slicedToArray(_useState19, 2),\n      target = _useState20[0],\n      setTarget = _useState20[1];\n\n  (0, _react.useEffect)(function () {\n    if (sticky) {\n      var stickyButNotAtEndSince = false;\n      var timeout = setImmediateInterval(function () {\n        if (sticky && target && !computeViewState({\n          mode: mode,\n          target: target\n        }).atEnd) {\n          if (!stickyButNotAtEndSince) {\n            stickyButNotAtEndSince = Date.now();\n          } else if (Date.now() - stickyButNotAtEndSince > SCROLL_DECISION_DURATION) {\n            // Quirks: In Firefox, after user scroll down, Firefox do two things:\n            //         1. Set to a new \"scrollTop\"\n            //         2. Fire \"scroll\" event\n            //         For what we observed, #1 is fired about 20ms before #2. There is a chance that this stickyCheckTimeout is being scheduled between 1 and 2.\n            //         That means, if we just look at #1 to decide if we should scroll, we will always scroll, in oppose to the user's intention.\n            // Repro: Open Firefox, set checkInterval to a lower number, and try to scroll by dragging the scroll handler. It will jump back.\n            !animating && scrollToEnd();\n            stickyButNotAtEndSince = false;\n          }\n        } else {\n          stickyButNotAtEndSince = false;\n        }\n      }, Math.max(MIN_CHECK_INTERVAL, checkInterval) || MIN_CHECK_INTERVAL);\n      return function () {\n        return clearInterval(timeout);\n      };\n    }\n  }, [animating, checkInterval, mode, scrollToEnd, sticky, target]);\n  var handleScroll = (0, _react.useCallback)(function (_ref3) {\n    var timeStampLow = _ref3.timeStampLow; // Currently, there are no reliable way to check if the \"scroll\" event is trigger due to\n    // user gesture, programmatic scrolling, or Chrome-synthesized \"scroll\" event to compensate size change.\n    // Thus, we use our best-effort to guess if it is triggered by user gesture, and disable sticky if it is heading towards the start direction.\n\n    if (timeStampLow <= ignoreScrollEventBeforeRef.current) {\n      // Since we debounce \"scroll\" event, this handler might be called after spineTo.onEnd (a.k.a. artificial scrolling).\n      // We should ignore debounced event fired after scrollEnd, because without skipping them, the userInitiatedScroll calculated below will not be accurate.\n      // Thus, on a fast machine, adding elements super fast will lose the \"stickiness\".\n      return;\n    }\n\n    if (target) {\n      var _computeViewState = computeViewState({\n        mode: mode,\n        target: target\n      }),\n          _atBottom = _computeViewState.atBottom,\n          _atEnd = _computeViewState.atEnd,\n          _atStart = _computeViewState.atStart,\n          _atTop = _computeViewState.atTop;\n\n      setAtBottom(_atBottom);\n      setAtEnd(_atEnd);\n      setAtStart(_atStart);\n      setAtTop(_atTop); // Chrome will emit \"synthetic\" scroll event if the container is resized or an element is added\n      // We need to ignore these \"synthetic\" events\n      // Repro: In playground, press 4-1-5-1-1 (small, add one, normal, add one, add one)\n      //        Nomatter how fast or slow the sequence is being presssed, it should still stick to the bottom\n\n      var nextOffsetHeight = target.offsetHeight,\n          nextScrollHeight = target.scrollHeight;\n      var offsetHeightChanged = nextOffsetHeight !== offsetHeight;\n      var scrollHeightChanged = nextScrollHeight !== scrollHeight;\n      offsetHeightChanged && setOffsetHeight(nextOffsetHeight);\n      scrollHeightChanged && setScrollHeight(nextScrollHeight); // Sticky means:\n      // - If it is scrolled programatically, we are still in sticky mode\n      // - If it is scrolled by the user, then sticky means if we are at the end\n      // Only update stickiness if the scroll event is not due to synthetic scroll done by Chrome\n\n      !offsetHeightChanged && !scrollHeightChanged && setSticky(animating || _atEnd); // If no scrollTop is set (not in programmatic scrolling mode), we should set \"animating\" to false\n      // \"animating\" is used to calculate the \"sticky\" property\n\n      scrollTop === null && setAnimating(false);\n    }\n  }, [animating, ignoreScrollEventBeforeRef, mode, offsetHeight, scrollHeight, scrollTop, setAnimating, setAtBottom, setAtEnd, setAtStart, setAtTop, setOffsetHeight, setScrollHeight, setSticky, target]);\n  var handleScrollEnd = (0, _react.useCallback)(function () {\n    ignoreScrollEventBeforeRef.current = Date.now();\n    setAnimating(false);\n    setScrollTop(null);\n  }, [ignoreScrollEventBeforeRef, setScrollTop]);\n  var internalContext = (0, _react.useMemo)(function () {\n    return {\n      offsetHeight: offsetHeight,\n      scrollHeight: scrollHeight,\n      setTarget: setTarget\n    };\n  }, [offsetHeight, scrollHeight, setTarget]);\n  var stateContext = (0, _react.useMemo)(function () {\n    return {\n      animating: animating,\n      atBottom: atBottom,\n      atEnd: atEnd,\n      atStart: atStart,\n      atTop: atTop,\n      mode: mode,\n      sticky: sticky\n    };\n  }, [animating, atBottom, atEnd, atStart, atTop, mode, sticky]);\n  var functionContext = (0, _react.useMemo)(function () {\n    return {\n      scrollTo: scrollTo,\n      scrollToBottom: scrollToBottom,\n      scrollToEnd: scrollToEnd,\n      scrollToStart: scrollToStart,\n      scrollToTop: scrollToTop\n    };\n  }, [scrollTo, scrollToBottom, scrollToEnd, scrollToStart, scrollToTop]);\n  (0, _react.useEffect)(function () {\n    // We need to update the \"scrollHeight\" value to latest when the user do a focus inside the box.\n    //\n    // This is because:\n    // - In our code that mitigate Chrome synthetic scrolling, that code will look at whether \"scrollHeight\" value is latest or not.\n    // - That code only run on \"scroll\" event.\n    // - That means, on every \"scroll\" event, if the \"scrollHeight\" value is not latest, we will skip modifying the stickiness.\n    // - That means, if the user \"focus\" to an element that cause the scroll view to scroll to the bottom, the user agent will fire \"scroll\" event.\n    //   Since the \"scrollHeight\" is not latest value, this \"scroll\" event will be ignored and stickiness will not be modified.\n    // - That means, if the user \"focus\" to a newly added element that is at the end of the scroll view, the \"scroll to bottom\" button will continue to show.\n    //\n    // Repro in Chrome:\n    // 1. Fill up a scroll view\n    // 2. Scroll up, the \"scroll to bottom\" button should show up\n    // 3. Click \"Add a button\"\n    // 4. Click on the scroll view (to pseudo-focus on it)\n    // 5. Press TAB, the scroll view will be at the bottom\n    //\n    // Expect:\n    // - The \"scroll to bottom\" button should be gone.\n    if (target) {\n      var handleFocus = function handleFocus() {\n        return setScrollHeight(target.scrollHeight);\n      };\n\n      target.addEventListener('focus', handleFocus, {\n        capture: true,\n        passive: true\n      });\n      return function () {\n        return target.removeEventListener('focus', handleFocus);\n      };\n    }\n  }, [target]);\n  return /*#__PURE__*/_react.default.createElement(_InternalContext.default.Provider, {\n    value: internalContext\n  }, /*#__PURE__*/_react.default.createElement(_FunctionContext.default.Provider, {\n    value: functionContext\n  }, /*#__PURE__*/_react.default.createElement(_StateContext.default.Provider, {\n    value: stateContext\n  }, children, target && /*#__PURE__*/_react.default.createElement(_EventSpy.default, {\n    debounce: debounce,\n    name: \"scroll\",\n    onEvent: handleScroll,\n    target: target\n  }), target && scrollTop !== null && /*#__PURE__*/_react.default.createElement(_SpineTo.default, {\n    name: \"scrollTop\",\n    onEnd: handleScrollEnd,\n    target: target,\n    value: scrollTop\n  }))));\n};\n\nComposer.defaultProps = {\n  checkInterval: 100,\n  children: undefined,\n  debounce: 17,\n  mode: undefined\n};\nComposer.propTypes = {\n  checkInterval: _propTypes.default.number,\n  children: _propTypes.default.any,\n  debounce: _propTypes.default.number,\n  mode: _propTypes.default.oneOf(['bottom', 'top'])\n};\nvar _default = Composer;\nexports.default = _default;","map":{"version":3,"sources":["../../src/ScrollToBottom/Composer.js"],"names":["MIN_CHECK_INTERVAL","MODE_BOTTOM","MODE_TOP","NEAR_END_THRESHOLD","SCROLL_DECISION_DURATION","fn","setInterval","mode","target","offsetHeight","scrollHeight","scrollTop","atBottom","atTop","atEnd","atStart","Composer","checkInterval","children","debounce","ignoreScrollEventBeforeRef","setScrollTop","setOffsetHeight","setScrollHeight","animating","setAnimating","setAtBottom","setAtEnd","setAtTop","setAtStart","sticky","setSticky","scrollTo","scrollToBottom","scrollToTop","scrollToEnd","scrollToStart","setTarget","stickyButNotAtEndSince","timeout","setImmediateInterval","Date","Math","clearInterval","handleScroll","timeStampLow","computeViewState","nextOffsetHeight","nextScrollHeight","offsetHeightChanged","scrollHeightChanged","handleScrollEnd","internalContext","stateContext","functionContext","handleFocus","capture","passive","undefined","PropTypes"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport EventSpy from '../EventSpy';\nimport FunctionContext from './FunctionContext';\nimport InternalContext from './InternalContext';\nimport SpineTo from '../SpineTo';\nimport StateContext from './StateContext';\n\nconst MIN_CHECK_INTERVAL = 17; // 1 frame\nconst MODE_BOTTOM = 'bottom';\nconst MODE_TOP = 'top';\nconst NEAR_END_THRESHOLD = 1;\nconst SCROLL_DECISION_DURATION = 34; // 2 frames\n\nfunction setImmediateInterval(fn, ms) {\n  fn();\n\n  return setInterval(fn, ms);\n}\n\nfunction computeViewState({ mode, target: { offsetHeight, scrollHeight, scrollTop } }) {\n  const atBottom = scrollHeight - scrollTop - offsetHeight < NEAR_END_THRESHOLD;\n  const atTop = scrollTop < NEAR_END_THRESHOLD;\n  const atEnd = mode === MODE_TOP ? atTop : atBottom;\n  const atStart = mode !== MODE_TOP ? atTop : atBottom;\n\n  return {\n    atBottom,\n    atEnd,\n    atStart,\n    atTop\n  };\n}\n\nconst Composer = ({ checkInterval, children, debounce, mode }) => {\n  mode = mode === MODE_TOP ? MODE_TOP : MODE_BOTTOM;\n\n  const ignoreScrollEventBeforeRef = useRef(0);\n  const [scrollTop, setScrollTop] = useState(mode === MODE_TOP ? 0 : '100%');\n\n  // Internal context\n  const [offsetHeight, setOffsetHeight] = useState(0);\n  const [scrollHeight, setScrollHeight] = useState(0);\n\n  // State context\n  const [animating, setAnimating] = useState(false);\n  const [atBottom, setAtBottom] = useState(true);\n  const [atEnd, setAtEnd] = useState(true);\n  const [atTop, setAtTop] = useState(true);\n  const [atStart, setAtStart] = useState(false);\n  const [sticky, setSticky] = useState(true);\n\n  // Function context\n  const scrollTo = useCallback(\n    scrollTop => {\n      setAnimating(true);\n      setScrollTop(scrollTop);\n    },\n    [setAnimating, setScrollTop]\n  );\n\n  const scrollToBottom = useCallback(() => scrollTo('100%'), [scrollTo]);\n  const scrollToTop = useCallback(() => scrollTo(0), [scrollTo]);\n\n  const scrollToEnd = useCallback(() => (mode === MODE_TOP ? scrollToTop() : scrollToBottom()), [\n    mode,\n    scrollToBottom,\n    scrollToTop\n  ]);\n  const scrollToStart = useCallback(() => (mode === MODE_TOP ? scrollToBottom() : scrollToTop()), [\n    mode,\n    scrollToBottom,\n    scrollToTop\n  ]);\n\n  const [target, setTarget] = useState(null);\n\n  useEffect(() => {\n    if (sticky) {\n      let stickyButNotAtEndSince = false;\n\n      const timeout = setImmediateInterval(() => {\n        if (sticky && target && !computeViewState({ mode, target }).atEnd) {\n          if (!stickyButNotAtEndSince) {\n            stickyButNotAtEndSince = Date.now();\n          } else if (Date.now() - stickyButNotAtEndSince > SCROLL_DECISION_DURATION) {\n            // Quirks: In Firefox, after user scroll down, Firefox do two things:\n            //         1. Set to a new \"scrollTop\"\n            //         2. Fire \"scroll\" event\n            //         For what we observed, #1 is fired about 20ms before #2. There is a chance that this stickyCheckTimeout is being scheduled between 1 and 2.\n            //         That means, if we just look at #1 to decide if we should scroll, we will always scroll, in oppose to the user's intention.\n            // Repro: Open Firefox, set checkInterval to a lower number, and try to scroll by dragging the scroll handler. It will jump back.\n\n            !animating && scrollToEnd();\n            stickyButNotAtEndSince = false;\n          }\n        } else {\n          stickyButNotAtEndSince = false;\n        }\n      }, Math.max(MIN_CHECK_INTERVAL, checkInterval) || MIN_CHECK_INTERVAL);\n\n      return () => clearInterval(timeout);\n    }\n  }, [animating, checkInterval, mode, scrollToEnd, sticky, target]);\n\n  const handleScroll = useCallback(\n    ({ timeStampLow }) => {\n      // Currently, there are no reliable way to check if the \"scroll\" event is trigger due to\n      // user gesture, programmatic scrolling, or Chrome-synthesized \"scroll\" event to compensate size change.\n      // Thus, we use our best-effort to guess if it is triggered by user gesture, and disable sticky if it is heading towards the start direction.\n\n      if (timeStampLow <= ignoreScrollEventBeforeRef.current) {\n        // Since we debounce \"scroll\" event, this handler might be called after spineTo.onEnd (a.k.a. artificial scrolling).\n        // We should ignore debounced event fired after scrollEnd, because without skipping them, the userInitiatedScroll calculated below will not be accurate.\n        // Thus, on a fast machine, adding elements super fast will lose the \"stickiness\".\n\n        return;\n      }\n\n      if (target) {\n        const { atBottom, atEnd, atStart, atTop } = computeViewState({ mode, target });\n\n        setAtBottom(atBottom);\n        setAtEnd(atEnd);\n        setAtStart(atStart);\n        setAtTop(atTop);\n\n        // Chrome will emit \"synthetic\" scroll event if the container is resized or an element is added\n        // We need to ignore these \"synthetic\" events\n        // Repro: In playground, press 4-1-5-1-1 (small, add one, normal, add one, add one)\n        //        Nomatter how fast or slow the sequence is being presssed, it should still stick to the bottom\n        const { offsetHeight: nextOffsetHeight, scrollHeight: nextScrollHeight } = target;\n        const offsetHeightChanged = nextOffsetHeight !== offsetHeight;\n        const scrollHeightChanged = nextScrollHeight !== scrollHeight;\n\n        offsetHeightChanged && setOffsetHeight(nextOffsetHeight);\n        scrollHeightChanged && setScrollHeight(nextScrollHeight);\n\n        // Sticky means:\n        // - If it is scrolled programatically, we are still in sticky mode\n        // - If it is scrolled by the user, then sticky means if we are at the end\n\n        // Only update stickiness if the scroll event is not due to synthetic scroll done by Chrome\n        !offsetHeightChanged && !scrollHeightChanged && setSticky(animating || atEnd);\n\n        // If no scrollTop is set (not in programmatic scrolling mode), we should set \"animating\" to false\n        // \"animating\" is used to calculate the \"sticky\" property\n        scrollTop === null && setAnimating(false);\n      }\n    },\n    [\n      animating,\n      ignoreScrollEventBeforeRef,\n      mode,\n      offsetHeight,\n      scrollHeight,\n      scrollTop,\n      setAnimating,\n      setAtBottom,\n      setAtEnd,\n      setAtStart,\n      setAtTop,\n      setOffsetHeight,\n      setScrollHeight,\n      setSticky,\n      target\n    ]\n  );\n\n  const handleScrollEnd = useCallback(() => {\n    ignoreScrollEventBeforeRef.current = Date.now();\n    setAnimating(false);\n    setScrollTop(null);\n  }, [ignoreScrollEventBeforeRef, setScrollTop]);\n\n  const internalContext = useMemo(\n    () => ({\n      offsetHeight,\n      scrollHeight,\n      setTarget\n    }),\n    [offsetHeight, scrollHeight, setTarget]\n  );\n\n  const stateContext = useMemo(\n    () => ({\n      animating,\n      atBottom,\n      atEnd,\n      atStart,\n      atTop,\n      mode,\n      sticky\n    }),\n    [animating, atBottom, atEnd, atStart, atTop, mode, sticky]\n  );\n\n  const functionContext = useMemo(\n    () => ({\n      scrollTo,\n      scrollToBottom,\n      scrollToEnd,\n      scrollToStart,\n      scrollToTop\n    }),\n    [scrollTo, scrollToBottom, scrollToEnd, scrollToStart, scrollToTop]\n  );\n\n  useEffect(() => {\n    // We need to update the \"scrollHeight\" value to latest when the user do a focus inside the box.\n    //\n    // This is because:\n    // - In our code that mitigate Chrome synthetic scrolling, that code will look at whether \"scrollHeight\" value is latest or not.\n    // - That code only run on \"scroll\" event.\n    // - That means, on every \"scroll\" event, if the \"scrollHeight\" value is not latest, we will skip modifying the stickiness.\n    // - That means, if the user \"focus\" to an element that cause the scroll view to scroll to the bottom, the user agent will fire \"scroll\" event.\n    //   Since the \"scrollHeight\" is not latest value, this \"scroll\" event will be ignored and stickiness will not be modified.\n    // - That means, if the user \"focus\" to a newly added element that is at the end of the scroll view, the \"scroll to bottom\" button will continue to show.\n    //\n    // Repro in Chrome:\n    // 1. Fill up a scroll view\n    // 2. Scroll up, the \"scroll to bottom\" button should show up\n    // 3. Click \"Add a button\"\n    // 4. Click on the scroll view (to pseudo-focus on it)\n    // 5. Press TAB, the scroll view will be at the bottom\n    //\n    // Expect:\n    // - The \"scroll to bottom\" button should be gone.\n    if (target) {\n      const handleFocus = () => setScrollHeight(target.scrollHeight);\n\n      target.addEventListener('focus', handleFocus, { capture: true, passive: true });\n\n      return () => target.removeEventListener('focus', handleFocus);\n    }\n  }, [target]);\n\n  return (\n    <InternalContext.Provider value={internalContext}>\n      <FunctionContext.Provider value={functionContext}>\n        <StateContext.Provider value={stateContext}>\n          {children}\n          {target && <EventSpy debounce={debounce} name=\"scroll\" onEvent={handleScroll} target={target} />}\n          {target && scrollTop !== null && (\n            <SpineTo name=\"scrollTop\" onEnd={handleScrollEnd} target={target} value={scrollTop} />\n          )}\n        </StateContext.Provider>\n      </FunctionContext.Provider>\n    </InternalContext.Provider>\n  );\n};\n\nComposer.defaultProps = {\n  checkInterval: 100,\n  children: undefined,\n  debounce: 17,\n  mode: undefined\n};\n\nComposer.propTypes = {\n  checkInterval: PropTypes.number,\n  children: PropTypes.any,\n  debounce: PropTypes.number,\n  mode: PropTypes.oneOf(['bottom', 'top'])\n};\n\nexport default Composer;\n"]},"metadata":{},"sourceType":"script"}