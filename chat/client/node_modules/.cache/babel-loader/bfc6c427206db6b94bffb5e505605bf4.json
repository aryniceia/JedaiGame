{"ast":null,"code":"var _jsxFileName = \"/Users/vitalsonlorran/Documents/GitHub/JedaiGame/chat/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from \"react\";\nimport queryString from 'query-string';\nimport io from \"socket.io-client\";\nimport './Chat.css';\nimport Input from '../Input/Input';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Messages from '../Messages/Messages'; //import TextContainer from '../TextContainer/TextContainer';\n\nlet socket;\n{\n  /*Notes on what I needed to import\n     We are using hooks so we need useState/Effect that is important for life cycle emthods in hooks\n     We use query-string module to retrieve data from the url\n     We need io from socket.io-client\n  */\n}\n{\n  /* The important of socket.io is placed in here below\n     THIS IS ABOUT USE EFFECT HOOK\n         The first useEffect is the first call, and runs when the component renders. \n         We need to retrieve the data users entered while joining, which is what we get from location.search and location comes from the react router\n         For useEffect we stopped it from having two instances of socket by passing an array with endpoint and location.search.  \n         If those two things change we re render our useeffect(this stops unneccesary side effects)   \n     Things about Socket\n         Emit allows you to pass in data, you pass in a string that the backend recognizes\n         {name, room} is an object and it has the same syntax as {room:room }\n         emit has a third parameter, which is a call back function, which executes the arrow function when socket.on's callbackis called, \n  */\n}\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'https://react-chat-app-project.herokuapp.com/';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT);\n    setRoom(room);\n    setName(name);\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]); //this useEffect is for handeling messages and only runs when messages array changes\n\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages(messages => [...messages, message]); //add new messages to our messages array the ... copies the old messages and all we do is append the new\n    });\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n  }, []); //functioning for sending messages (its a functional component hence why its a function)\n\n  const sendMessage = event => {\n    event.preventDefault(); // full browser refreshes aren't good\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage('')); //on the callback from index.js our input field clears\n    }\n  };\n\n  console.log(message, messages); // i need another component that will display the users \n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    room: room,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Messages, {\n    messages: messages,\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/vitalsonlorran/Documents/GitHub/JedaiGame/chat/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","Input","InfoBar","Messages","socket","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","error","alert","on","sendMessage","event","preventDefault","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport queryString from 'query-string';\nimport io from \"socket.io-client\";\n\nimport './Chat.css';\n\nimport Input from '../Input/Input';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Messages from '../Messages/Messages';\n//import TextContainer from '../TextContainer/TextContainer';\n\nlet socket; \n\n{/*Notes on what I needed to import\n    We are using hooks so we need useState/Effect that is important for life cycle emthods in hooks\n    We use query-string module to retrieve data from the url\n    We need io from socket.io-client\n*/}\n\n{/* The important of socket.io is placed in here below\n    THIS IS ABOUT USE EFFECT HOOK\n        The first useEffect is the first call, and runs when the component renders. \n        We need to retrieve the data users entered while joining, which is what we get from location.search and location comes from the react router\n        For useEffect we stopped it from having two instances of socket by passing an array with endpoint and location.search.  \n        If those two things change we re render our useeffect(this stops unneccesary side effects)   \n    Things about Socket\n        Emit allows you to pass in data, you pass in a string that the backend recognizes\n        {name, room} is an object and it has the same syntax as {room:room }\n        emit has a third parameter, which is a call back function, which executes the arrow function when socket.on's callbackis called, \n*/}\n\nconst Chat = ({ location }) => {\n\n    const [name, setName] = useState(''); \n    const [room, setRoom] = useState(''); \n    const [users, setUsers] = useState('');\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n\n    const ENDPOINT = 'https://react-chat-app-project.herokuapp.com/';\n\n    useEffect(() => {\n        const { name, room } = queryString.parse(location.search);\n    \n        socket = io(ENDPOINT);\n    \n        setRoom(room);\n        setName(name)\n    \n        socket.emit('join', { name, room }, (error) => {\n          if(error) {\n            alert(error);\n          }\n        });\n    }, [ENDPOINT, location.search]);\n\n    //this useEffect is for handeling messages and only runs when messages array changes\n    useEffect(() => {\n        socket.on('message', message => {\n          setMessages(messages => [ ...messages, message ]);//add new messages to our messages array the ... copies the old messages and all we do is append the new\n        });\n        \n        socket.on(\"roomData\", ({ users }) => {\n          setUsers(users);\n        });\n    }, []);\n\n\n    //functioning for sending messages (its a functional component hence why its a function)\n    const sendMessage = (event) => {\n        event.preventDefault(); // full browser refreshes aren't good\n\n        if(message){\n            socket.emit('sendMessage', message, () => setMessage('')) //on the callback from index.js our input field clears\n        }\n\n\n    }\n    console.log(message,messages);\n    // i need another component that will display the users \n    return (\n        <div className =\"outerContainer\">\n            <div className = \"container\"> \n                <InfoBar room = {room} />\n                <Messages messages={messages} name={name} />\n                <Input message = {message} setMessage={setMessage} sendMessage= {sendMessage} />\n            </div>\n        </div>\n    )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}