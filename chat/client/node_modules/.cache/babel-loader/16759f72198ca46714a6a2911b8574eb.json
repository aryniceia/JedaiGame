{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\nvar _debounce = _interopRequireDefault(require(\"./debounce\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar EventSpy = function EventSpy(_ref) {\n  var debounce = _ref.debounce,\n      name = _ref.name,\n      onEvent = _ref.onEvent,\n      target = _ref.target; // We need to save the \"onEvent\" to ref.\n  // This is because \"onEvent\" may change from time to time, but debounce may still fire to the older callback.\n\n  var onEventRef = (0, _react.useRef)();\n  onEventRef.current = onEvent;\n  var debouncer = (0, _react.useCallback)( // eslint-disable-next-line react-hooks/exhaustive-deps\n  (0, _debounce.default)(function (event) {\n    var current = onEventRef.current;\n    current && current(event);\n  }, debounce), [debounce, onEventRef]);\n  var handleEvent = (0, _react.useCallback)(function (event) {\n    event.timeStampLow = Date.now();\n    debouncer(event);\n  }, [debouncer]);\n  (0, _react.useLayoutEffect)(function () {\n    target.addEventListener(name, handleEvent, {\n      passive: true\n    });\n    handleEvent({\n      target: target,\n      type: name\n    });\n    return function () {\n      return target.removeEventListener(name, handleEvent);\n    };\n  }, [name, handleEvent, target]);\n  return false;\n};\n\nEventSpy.defaultProps = {\n  debounce: 200\n};\nvar _default = EventSpy;\nexports.default = _default;","map":{"version":3,"sources":["../src/EventSpy.js"],"names":["EventSpy","debounce","name","onEvent","target","onEventRef","debouncer","current","handleEvent","event","Date","passive","type"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;;;;;;;AAEA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAA,IAAA,EAAyC;AAAA,MAAtCC,QAAsC,GAAA,IAAA,CAAtCA,QAAsC;AAAA,MAA5BC,IAA4B,GAAA,IAAA,CAA5BA,IAA4B;AAAA,MAAtBC,OAAsB,GAAA,IAAA,CAAtBA,OAAsB;AAAA,MAAbC,MAAa,GAAA,IAAA,CAAbA,MAAa,CAAA,CACxD;AACA;;AACA,MAAMC,UAAU,GAAG,CAAA,GAAA,MAAA,CAAnB,MAAmB,GAAnB;AAEAA,EAAAA,UAAU,CAAVA,OAAAA,GAAAA,OAAAA;AAEA,MAAMC,SAAS,GAAG,CAAA,GAAA,MAAA,CAAA,WAAA,GAChB;AACA,GAAA,GAAA,SAAA,CAAA,OAAA,EAAW,UAAA,KAAA,EAAS;AAAA,QACVC,OADU,GACEF,UADF,CAAA,OAAA;AAGlBE,IAAAA,OAAO,IAAIA,OAAO,CAAlBA,KAAkB,CAAlBA;AAHF,GAAA,EAFgB,QAEhB,CAFgB,EAOhB,CAAA,QAAA,EAPF,UAOE,CAPgB,CAAlB;AAUA,MAAMC,WAAW,GAAG,CAAA,GAAA,MAAA,CAAA,WAAA,EAClB,UAAA,KAAA,EAAS;AACPC,IAAAA,KAAK,CAALA,YAAAA,GAAqBC,IAAI,CAAzBD,GAAqBC,EAArBD;AAEAH,IAAAA,SAAS,CAATA,KAAS,CAATA;AAJgB,GAAA,EAMlB,CANF,SAME,CANkB,CAApB;AASA,GAAA,GAAA,MAAA,CAAA,eAAA,EAAgB,YAAM;AACpBF,IAAAA,MAAM,CAANA,gBAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAA2C;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAA3CP;AACAI,IAAAA,WAAW,CAAC;AAAEJ,MAAAA,MAAM,EAAR,MAAA;AAAUQ,MAAAA,IAAI,EAAEV;AAAhB,KAAD,CAAXM;AAEA,WAAO,YAAA;AAAA,aAAMJ,MAAM,CAANA,mBAAAA,CAAAA,IAAAA,EAAN,WAAMA,CAAN;AAAP,KAAA;AAJF,GAAA,EAKG,CAAA,IAAA,EAAA,WAAA,EALH,MAKG,CALH;AAOA,SAAA,KAAA;AAjCF,CAAA;;AAoCAJ,QAAQ,CAARA,YAAAA,GAAwB;AACtBC,EAAAA,QAAQ,EAAE;AADY,CAAxBD;eAIeA,Q","sourcesContent":["import { useCallback, useLayoutEffect, useRef } from 'react';\n\nimport debounceFn from './debounce';\n\nconst EventSpy = ({ debounce, name, onEvent, target }) => {\n  // We need to save the \"onEvent\" to ref.\n  // This is because \"onEvent\" may change from time to time, but debounce may still fire to the older callback.\n  const onEventRef = useRef();\n\n  onEventRef.current = onEvent;\n\n  const debouncer = useCallback(\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    debounceFn(event => {\n      const { current } = onEventRef;\n\n      current && current(event);\n    }, debounce),\n    [debounce, onEventRef]\n  );\n\n  const handleEvent = useCallback(\n    event => {\n      event.timeStampLow = Date.now();\n\n      debouncer(event);\n    },\n    [debouncer]\n  );\n\n  useLayoutEffect(() => {\n    target.addEventListener(name, handleEvent, { passive: true });\n    handleEvent({ target, type: name });\n\n    return () => target.removeEventListener(name, handleEvent);\n  }, [name, handleEvent, target]);\n\n  return false;\n};\n\nEventSpy.defaultProps = {\n  debounce: 200\n};\n\nexport default EventSpy;\n"]},"metadata":{},"sourceType":"script"}